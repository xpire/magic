{"version":3,"sources":["logo.svg","components/parallax/ParallaxContainer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","calc","x","y","window","innerWidth","innerHeight","defaultConfig","xy","config","mass","tension","friction","ParallaxContainer","layerArray","useSpring","props","set","className","onMouseMove","clientX","clientY","onMouseLeave","map","layer","index","div","key","style","transform","interpolate","magic","text","color","name","description","App","React","useState","setHover","title","setTitle","subtitle","setSubTitle","setColor","copy","navigator","clipboard","writeText","initial","scale","whileTap","Typography","variant","flexDirection","display","snippet","span","whileHover","onMouseEnter","s","console","log","onClick","position","opacity","animate","exit","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8d48800.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport \"./ParallaxContainer.css\";\n\nconst calc = (x, y) => [x - window.innerWidth / 2, y - window.innerHeight / 2];\n// const trans1 = (x, y) => `translate3d(${x / -10}px,${y / -10}px,0)`\n\nconst defaultConfig = {\n  xy: [0, 0],\n  config: { mass: 10, tension: 550, friction: 140 },\n};\n\nconst ParallaxContainer = ({ layerArray, config }) => {\n  const [props, set] = useSpring(() => ({ ...defaultConfig, ...config }));\n  return (\n    <div\n      className=\"container\"\n      onMouseMove={({ clientX: x, clientY: y }) => {\n        set({ xy: calc(x, y) });\n      }}\n      onMouseLeave={() => {\n        set({ xy: [0, 0] });\n      }}\n    >\n      {layerArray.map((layer, index) => {\n        return (\n          <animated.div\n            className=\"layer\"\n            key={index}\n            style={{ transform: props.xy.interpolate(layer.transform) }}\n          >\n            {layer.layer}\n          </animated.div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ParallaxContainer;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nimport ParallaxLayer from \"./components/parallax/ParallaxLayer\";\nimport ParallaxContainer from \"./components/parallax/ParallaxContainer\";\nimport Magic from \"./components/magic/Magic\";\n\nvar magic = [\n  {\n    text: `'\";`,\n    color: \"#F6645D\",\n    name: \"SQLI\",\n    description: \"Escapes the SQL query\",\n    index: 0,\n  },\n  {\n    text: `<lol/>`,\n    color: \"#1AD69C\",\n    name: \"XSS\",\n    description: \"Incorrect HTML element\",\n    index: 1,\n  },\n  {\n    text: `../`,\n    color: \"#DF89DD\",\n    name: \"Path Traversal\",\n    description: \"Tries to access prevous directory\",\n    index: 2,\n  },\n  {\n    text: `--#`,\n    color: \"#F6645D\",\n    name: \"SQLI\",\n    description: \"Comments the rest of the SQL Query\",\n    index: 3,\n  },\n  {\n    text: `\\`ls\\``,\n    color: \"#9BDBFE\",\n    name: \"bash\",\n    description: \"Runs the ls command in bash\",\n    index: 4,\n  },\n];\n\nconst Info = ({ data, variant = \"h1\", ...afterProps }) => (\n  <AnimatePresence>\n    <motion.span\n      key={data}\n      initial={{ x: -200, opacity: 0 }}\n      animate={{ x: 0, opacity: 1 }}\n      exit={{ x: 200, opacity: 0 }}\n      style={{ position: \"absolute\", ...afterProps }}\n    >\n      <Typography variant={variant}>{data}</Typography>\n    </motion.span>\n  </AnimatePresence>\n);\n\nfunction App() {\n  const [hover, setHover] = React.useState(-1);\n  const [title, setTitle] = React.useState(\"magic string\");\n  const [subtitle, setSubTitle] = React.useState(\"for pentesters\");\n  const [color, setColor] = React.useState(\"#FFFFFF\");\n\n  const handleHoverFor = (s) => {\n    return () => {\n      console.log(s.index);\n      // console.log(hover);\n      setHover(s.index);\n      setTitle(s.name);\n      setSubTitle(s.description);\n      setColor(s.color);\n    };\n  };\n\n  const copy = () => {\n    navigator.clipboard.writeText(`'\";<lol/>../--#\\`ls\\``);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ParallaxContainer\n          layerArray={[\n            {\n              layer: (\n                <div>\n                  <motion.div initial={{ scale: 1 }} whileTap={{ scale: 0.9 }}>\n                    <Typography\n                      variant=\"h1\"\n                      style={{\n                        flexDirection: \"row\",\n                        display: \"flex\",\n                      }}\n                    >\n                      {magic.map((snippet, index) => (\n                        <motion.span\n                          key={index}\n                          initial={{ scale: 1, color: \"#FFFFFF\" }}\n                          whileHover={{ scale: 1.2, color: snippet.color }}\n                          onMouseEnter={handleHoverFor(snippet)}\n                          onClick={copy}\n                        >\n                          <code key={index}>{snippet.text}</code>\n                        </motion.span>\n                      ))}\n                    </Typography>\n                  </motion.div>\n                  <div style={{ position: \"relative\", display: \"flex\" }}>\n                    <Typography>\n                      <AnimatePresence>\n                        <motion.span\n                          key={title}\n                          initial={{ x: -200, opacity: 0 }}\n                          animate={{ x: 0, opacity: 0.3 }}\n                          exit={{ x: 200, opacity: 0 }}\n                          style={{ position: \"absolute\", color: color }}\n                        >\n                          <Typography variant=\"h1\">{title}</Typography>\n                        </motion.span>\n                        <motion.span\n                          key={subtitle}\n                          initial={{ x: -200, opacity: 0 }}\n                          animate={{ x: 0, opacity: 1 }}\n                          exit={{ x: 200, opacity: 0 }}\n                          style={{ position: \"absolute\" }}\n                        >\n                          <Typography variant=\"h2\">{subtitle}</Typography>\n                        </motion.span>\n                      </AnimatePresence>\n                    </Typography>\n                  </div>\n                </div>\n              ),\n              transform: (x, y) => `translate3d(${x / -20}px,${y / -20}px,0)`,\n            },\n          ]}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}